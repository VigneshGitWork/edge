var script = document.createElement('script');
//script.src = 'https://aem-dev-skyplus6e.goindigo.in/content/experience-fragments/skyplus6e/in/en/header/Member/master.js?test';
script.innerHTML = `<!-- SDI include (path: /content/experience-fragments/skyplus6e/in/en/header/Member/master/_jcr_content.sharedcontent.js, resourceType: skyplus6e/components/structure/xfpage) -->
var xfDeliveryObj = {
    "content": ""
};
function initialize(temp) {
    

        (function() {
            console.log(temp);

            var current = document.body;

            const htmlString = b64DecodeUnicode(temp.content);

            // const fragment = document.createRange().createContextualFragment(htmlString);

            function removeLinks(html) {
                let links = ``;
                var container = document.createElement('span');
                container.innerHTML = html;
                Array.from(container.querySelectorAll('link[href*="site"]')).forEach(link=>{
                    links += " " + link.outerHTML;
                    link.parentNode.removeChild(link)
                }
                );
                return {
                    html: container.innerHTML,
                    links: links
                };
            }

            var obj = removeLinks(htmlString);
            console.log("--**********", obj)

            const fragment = document.createRange().createContextualFragment(obj.html);
            const fragmentLinks = document.createRange().createContextualFragment(obj.links);

            current.appendChild(fragmentLinks);
            setTimeout(()=>{
                current.appendChild(fragment);

            }
            , 2000);

            function b64DecodeUnicode(str) {
                return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)
                }).join(''))
            }
        }
        )();
    
}

initialize(xfDeliveryObj)
`
document.head.appendChild(script);